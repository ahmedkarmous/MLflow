import os 
import yaml
import mlflow
import argparse

TRACKING_URI = 'http://127.0.0.1:5000'


def log_experiment_on_server(experiment_path, exp_name, tracking_server_url):
    # if the experiment has no runs, we do nothing, there's no reason to create an experiment
    runs = os.listdir(experiment_path) # os.listdir affiche liste les dossiers et les fichiers, d'oÃ¹ la ligne 30
    # check if the experiment folder contains any run folders
    if runs == ['meta.yaml']: 
        print(f"No runs associated with the experiment {exp_name}. Experiment NOT added.")
        return ''
    
    mlflow.set_tracking_uri(tracking_server_url)

    experiment = mlflow.get_experiment_by_name(exp_name)
    # restore it if deleted
   
    server_experiment = mlflow.set_experiment(experiment_name=exp_name)
    for run_id in os.listdir(experiment_path):
        if run_id != "datasets":
            run_path = os.path.join(experiment_path, run_id)
            if os.path.isdir(run_path):
                log_run_on_server(server_experiment.experiment_id, run_path)
    return server_experiment.experiment_id


def log_run_on_server(experiment_id, run_path):
    with open(os.path.join(run_path, 'meta.yaml')) as f:
        run_meta = yaml.safe_load(f)

    run_name = run_meta['run_name']
    
    # If necessary, treat the name conflict of runs (multiple runs have the same name)
    
    with mlflow.start_run(experiment_id=experiment_id, run_name=run_name) as run:
        # log params
        params_path = os.path.join(run_path, 'params')
        if os.path.exists(params_path):
            for param in os.listdir(params_path):
                with open(os.path.join(params_path, param)) as f:
                    value = f.read()
                    ############### mlflow ###############
                    mlflow.log_param(param, value)
                    ############### mlflow ###############

        # log metrics
        metrics_path = os.path.join(run_path, 'metrics')
        if os.path.exists(metrics_path):
            for metric in os.listdir(metrics_path):
                with open(os.path.join(metrics_path, metric)) as f:
                    first_line = f.readline()
                    values = first_line.split()
                    value = float(values[1])
                    ############### mlflow ###############
                    mlflow.log_metric(metric, value)
                    ############### mlflow ###############

        # log tags
        tags_path = os.path.join(run_path, 'tags')
        if os.path.exists(tags_path):
            for tag in os.listdir(tags_path):
                with open(os.path.join(tags_path, tag)) as f:
                    value = f.read()
                mlflow.set_tag(tag, value)

        # log artifacts
        artifact_path = os.path.join(run_path, 'artifacts')
        if os.path.exists(artifact_path):
            ############### mlflow ###############
            mlflow.log_artifact(artifact_path)
            ############### mlflow ###############


def arg_parsing():
    parser = argparse.ArgumentParser()
    parser.add_argument('--tracking_data_path', type=str, required=True, help="The path to the (local) tracking data generated by mlflow")
    parser.add_argument('--tracking_server_url', type=str, required=True, help="The url of the remote tracking server")
    args = parser.parse_args()
    return args


def main():
    args = arg_parsing()
    mlruns_path = args.tracking_data_path
    tracking_server_url = args.tracking_server_url
    exp_added = 0
    server_experiment_id = ''
    if not (os.path.isdir(mlruns_path)):
        print(f"No direcotory found with the path: {mlruns_path}")
        return
    for experiment_id in os.listdir(mlruns_path):
        server_experiment_id = '' # it's necessary if we want to add multiple experiments
        if experiment_id not in ['0', '.trash', 'models', 'datasets']:
            experiment_path = os.path.join(mlruns_path, experiment_id)
            if os.path.isdir(experiment_path):
                with open(os.path.join(experiment_path, 'meta.yaml')) as f:
                    experiment_meta = yaml.safe_load(f)
                    experiment_name = experiment_meta['name']
                    server_experiment_id = log_experiment_on_server(experiment_path, experiment_name, tracking_server_url)
                if server_experiment_id != '':
                    exp_added += 1

    if exp_added > 0:
        print(f"{exp_added} experiment(s) added to {TRACKING_URI}")



if __name__ == '__main__':
    main()

# example of code run:
# python import_from_dir.py --tracking_data_path "mlruns/" --tracking_server_url "http://127.0.0.1:5000"